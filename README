＊　この手順は現在編集中です。
＊　このままでは動作しません。

OpenBlocks IoT BX1/EX1ファームウェア作成ガイド

ぷらっとホーム株式会社

Copyright (c) 2015 Plat'Home CO., LTD.

1. はじめに

このソフトウェアを使えばOpenBlocks IoT BX1/EX1のファームウェア
を作成することができます。内容は、シェルスクリプトとファームウェアに
含めるファイルです。

2. 対応ファームウェア

機種     | TARGET | DIST    |
=========|========|=========|
BX1/EX1  | obsbx1 | wheezy  |
---------+--------+---------|

項目TARGETとDISTは、ファームウェアを作成するときに実行するシェルスク
リプトに指定する文字列です。後節で参照します。

3. 準備

3.1. 作成ホスト

作成ホストのOSはDebian 7.9.0 amd64です。
ホストを用意して、そのOSをインストールします。ホストは物理マシンと
仮想マシンのどちらでもよろしいです。インターネットに接続できるよう、
ネッワークの設定をしてください。

3.2. 開発環境の取得

開発環境をぷらっとホームのFTPサイトftp.plathome.co.jpからダウンロードします。

ftp://ftp.plathome.co.jp/pub/BX1/wheezy/

使用するバージョンの source/debian_based_firmware-xxxx.tar.xz をダウンロード
してください。

  # wget http://ftp.plathome.co.jp/pub/BX1/wheezy/3.10.17-13/source/debian_based_firmware-20151118.tar.xz

開発環境を適当なディレクトリに展開します。

  # tar Jxvf debian_based_firmware-20151118.tar.xz

3.3. クロス開発環境

Debian 7.9.0 amd64上でクロス開発環境を構築します。

以下のパッケージをインストールします。

  ＊　build-essantial
  ＊　libncurses5-dev
  ＊　debootstrap
  ＊　gcc-multilib
  ＊　bc

  # apt-get install build-essential libncurses5-dev debootstrap gcc-multilib bc

OpenBlocks IoT  BX1/EX1上で動作するプログラムを作成できるように、64bit PC上に
32bit開発環境を構築します。

  # dpkg --add-archtecture i386
  # apt-get update

hostapdを作成するのに必要なパッケージをインストールします。

  # apt-get install libnl-dev:i386 libssl-dev:i386

gcc4.8.2のソースファイルをダウンロードし、ビルドして使用してください。

ビルド環境の設定

  # apt-get install libmpfr-dev libgmp-dev libmpc-dev zip
  # update-alternatives --install /usr/bin/gcc gcc /usr/bin/x86_64-linux-gnu-gcc-4.7 47
 --slave /usr/bin/g++ g++ /usr/bin/x86_64-linux-gnu-g++-4.7
  # update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 47 --slave /usr/bin/c++ c++ /usr/bin/g++

  # tar jxvf gcc-4.8.2.tar.bz2
  # cd gcc-4.8.2
  # ./configure
  # make
  # make install

パスの設定
  # update-alternatives --install /usr/bin/gcc gcc /usr/local/bin/x86_64-unknown-linux-gnu-gcc-4.8.2 48
 --slave /usr/bin/g++ g++ /usr/local/bin/x86_64-unknown-linux-gnu-g++
  # gcc --version
  gcc (GCC) 4.8.2

3.4. カーネルソース

以降はdebian_based_firmware/に移動しての作業になります。

3.4.1. 取得

カーネルソースをぷらっとホームのFTPサイトftp.plathome.co.jpからダウン
ロードします。

ftp://ftp.plathome.co.jp/pub/BX1/wheezy/

  # wget http://ftp.plathome.co.jp/pub/BX1/wheezy/3.10.17-13/source/linux-3.10.17-obsiot-20151118.tar.xz

3.4.2. 展開

カーネルソースをsource/obsbx1/に展開します。

  # cd source/obsbx1
  # tar Jxvf linux-3.10.17-obsiot-20151118.tar.xz

ディレクトリsourceには、TARGETをその名前としたディレクトリがあるので、
そこにカーネルソースを展開してください。
ディレクトリsource/TARGET/linux-KERNELが作成されます。

  # ls srouce/obsbx1
  linux-3.10.17 linux-3.10.17.orig

3.5. DVDイメージ

DIST=wheezyの場合、DebianのDVDイメージをDebianのミラーサイトからダウ
ンロードしてディレクトリisofilesにコピーします。

ファイルbuild_ramdisk/config.shのcase文中のISOFILEからDVDイメージのフ
ァイル名が分ります。

以下はファイル名の例です。

TARGET=obsbx1の場合
debian-7.8.0-i386-DVD-1.iso

4. 作成

ファームウェアを作成します。シェルスクリプトbuild_ramdisk/buildall.sh
のオプション-MにTARGET、-DにDISTを指定します。TARGET=obsbx1、
DIST=wheezyの場合、

  # cd build_ramdisk
  # ./buildall.sh -M obsbx1 -D wheezy

と実行します。

作成されたファームウェア一式は、ディレクトリ
release/TARGET/DIST/KERNEL-PATCHLEVELに置かれます。TARGET, DIST,
KERNEL, PATCHLEVELは、ご自身の文字列に置き換えてください。

例えば、ディレクトリrelease/obsbx1/wheezy/3.10.17-13には、以下のファイ
ルが作成されます。

o MD5.obsbx1: MD5チェックサムファイル
o System.map: カーネルのシステムマップファイル
o kernel-image-3.10.17-13-obsbx1.deb: コマンドdpkgなどでインストールするための
  パッケージ
o ramdisk-wheezy.obsbx1.img.gz: ファームウェアのRAMディスクイメージ
o bzImage: ファームウェアのカーネルイメージ

5. カスタマイズ

本節ではファームウェアのカスタマイズの手順を説明します。

シェルスクリプトbuild_ramdisk/buildall.shを実行することは、
DIST=wheezy, TARGET=obsbx1の場合、以下の通り実行することと同じです。

  # DIST=wheezy TARGET=obsbx1 ./build_debootstrap.sh
  # DIST=wheezy TARGET=obsbx1 ./build_kernel.sh
  # DIST=wheezy TARGET=obsbx1 ./build_ramdisk.sh
  # DIST=wheezy TARGET=obsbx1 ./release_firmware.sh

TARGETとDISTについては、予め次のように設定することで、毎回の指定は不要
になります。

  # export DIST=wheezy TARGET=obsbx1

内容の詳細は各シェルスクリプトを読んでいただくことにして、簡単に説明し
ておきます。以下のTARGETとDISTは、ご自身の文字列に置き換えてください。

o build_debootstrap.sh: debootstrapを実行し、ディレクトリ
  rootfs/DIST_TARGET以下にDebianを仮インストールしています。
o build_kernel.sh: カーネルとカーネルモジュールのコンパイルをしていま
す。
o build_ramdisk.sh: ディレクトリrootfs/DIST_TARGET以下に仮インストー
  ルしたDebianをOpenBlocks用に変更して、RAMディスクイメージを作成して
  います。
o release_firmware.sh: ファームウェア一式を作成しています。

上記のシェルスクリプトを手動で実行すれば、その途中で、カーネルとRAMデ
ィスクイメージのカスタマイズができます。

ファイルbuild_ramdisk/config.shのcase文中のPATCHLEVELには文字列などを
追加、例えば3customとすることをお勧めします。公式ファームウェアとの区
別がはっきりします。

カスタマイズの前に、その準備として、シェルスクリプト
build_ramdisk/buildall.shを実行しておいてください。

5.1. カーネル

カーネルのコンフィグレーションを変更してカーネルをカスタマイズするこ
とができます。
カーネルをカスタマイズしない場合には、「5.2. RAMディスクイメージ」節
に進んでください。

5.1.1. コンフィグレーションの変更

カーネルのコンフィグレーション用のファイルを作成します。

　# cp source/obsbx1/linux-3.10.17.org/arch/x86/configs/obsbx1_defconfig
 source/obsbx1/linux-3.10.17.org/arch/x86/configs/obsbx1_defconfig.orig
　# cd source/obsbx1/linux-3.10.17
　# make obsbx1_defconfig

カーネルのコンフィグレーションを変更します。

　# make menuconfig
　# cp .config source/arch/x86/configs/obsbx1_defconfig

5.1.2. コンパイル

シェルスクリプトbuild_ramdisk/build_kernel.shから順番に実行するか、シ
ェルスクリプトbuild_ramdisk/buildall.shを実行してください。RAMディス
クイメージをカスタマイズする場合、シェルスクリプト
build_ramdisk/build_kernel.shを実行して、次節に進んでください。

5.2. RAMディスクイメージ

シェルスクリプトbuild_ramdisk/build_ramdisk.shの実行が終了すると、デ
ィレクトリrootfs/DIST_TARGETに、RAMディスクに含まれるファイルが仮イン
ストールされます。ディレクトリrootfs/DIST_TARGET以下のファイルを変更
したり、パッケージを追加すれば、RAMディスクイメージのカスタマイズがで
きます。DISTとTARGETは、ご自身のものに置き換えてください。

5.2.1. パッケージの取得

追加するパッケージをDebianのミラーサイトからダウンロードして、ディレ
クトリextradebs/DISTにコピーします。DISTは、ご自身の文字列に置き換え
てください。

5.2.2. パッケージの追加

次のコマンドを実行してパッケージを追加します。DIST=wheezy,
TARGET=obsbx1の場合、

  # DIST=wheezy TARGET=obsbx1 ./08_add_extra_packages.sh

と実行します。

パッケージが追加されたかは、ファイル
rootfs/DIST_TARGET/var/lib/dpkg/statusで確認できます。TARGETとDISTは、
ご自身の文字列に置き換えてください。

5.2.3. RAMディスクイメージの作成

ディレクトリrootfs/DIST_TARGET以下のファイルをもとにRAMディスクイメー
ジを作成します。TARGETとDISTは、ご自身の文字列に置き換えてください。
DIST=wheezy, TARGET=obsbx1の場合、

  # DIST=wheezy TARGET=obsbx1 ./99_create_ramdisk.sh

と実行します。

ファームウェアを作成します。DIST=wheezy, TARGET=obsbx1の場合、

  # DIST=wheezy TARGET=obsbx1 ./release_firmware.sh

と実行します。

5.3. まとめ

一度「5.1.1. コンフィグレーションの変更」と「5.2.1. パッケージの取得」
をすませておけば、シェルスクリプトbuild_ramdisk/buildall.shを実行する
だけでカスタマイズのすんだファームウェアが作成できます。

6. ファームウェアの更新

ファームウェアのカーネルイメージbzImageとファームウェアのRAMディスク
イメージramdisk-wheezy.obsbx1.img.gzをOpenBlocksにネットワーク経由もし
くはUSBメモリでコピーしてください。TARGETは、ご自身の文字列に置き換え
てください。

/dev/mmbclk0p8をマウントし、コピーしたファイルを書き込み、再起動すれば
ファームウェアの更新は完了です。

  # mount /dev/mmcblk0p8 /mnt
  # cp bzImage /mnt
  # cp ramdisk-wheezy.obsbx1.img.gz /mnt
  # reboot

